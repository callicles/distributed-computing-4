extern crate convolution;
use convolution::convolute::*;

fn main() {

    let image: Vec<Vec<(f32, f32, f32)>>= vec!(
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0)),
        vec!((1.0,3.0,4.0), (5.0,6.0,3.0), (4.0,5.0,6.0))
    );

    let stencil: Vec<Vec<f32>> = vec!(
        vec!(1.0,3.0,4.0),
        vec!(1.0,3.0,4.0),
        vec!(1.0,3.0,4.0)
    );

    let result = compute_pixel(stencil, Coordinate(0,0), &image);

    println!("Pixel value computed: {}", result.0);
}

